# app.py - ‡¶´‡¶ø‡¶ï‡ßç‡¶∏‡¶° ‡¶≠‡¶æ‡¶∞‡ßç‡¶∏‡¶® (‡¶ï‡ßã‡¶®‡ßã ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®‡ßá‡¶á "‡¶™‡¶æ‡¶∞‡¶õ‡¶ø ‡¶®‡¶æ" ‡¶¶‡ßá‡¶ñ‡¶æ‡¶¨‡ßá ‡¶®‡¶æ)

import streamlit as st
import pandas as pd
import numpy as np
import faiss
from sentence_transformers import SentenceTransformer
import plotly.express as px

# --- ‡¶ü‡¶æ‡¶á‡¶ü‡ßá‡¶≤ ---
st.set_page_config(page_title="üçè Nutrition Genius", page_icon="üçè")
st.title("üçè Nutrition Genius")
st.markdown("> *‡¶´‡ßç‡¶∞‡¶ø ‡¶®‡¶ø‡¶â‡¶ü‡ßç‡¶∞‡¶ø‡¶∂‡¶® ‡¶∏‡¶π‡¶ï‡¶æ‡¶∞‡ßÄ - ‡¶ï‡ßã‡¶®‡ßã API ‡¶õ‡¶æ‡¶°‡¶º‡¶æ‡¶á!*")

# --- ‡¶°‡ßá‡¶ü‡¶æ‡¶∏‡ßá‡¶ü ---
@st.cache_data
def load_data():
    data = {
        "Food": ["Spinach", "Chicken Breast", "Brown Rice", "Peanut Butter", "Salmon", "Banana", "Quinoa", "Eggs", "Almonds", "Oats", "Tofu", "Lentils"],
        "Calories": [23, 165, 111, 588, 208, 89, 120, 155, 579, 389, 70, 116],
        "Protein (g)": [2.9, 31, 2.6, 25, 20, 1.1, 4.4, 13, 21, 16.9, 8, 9],
        "Fat (g)": [0.4, 3.6, 0.9, 50, 13, 0.3, 1.9, 11, 49, 6.9, 4, 0.4],
        "Carbs (g)": [3.6, 0, 23, 20, 0, 23, 21, 1.1, 22, 66, 3, 66],
        "Fiber (g)": [2.2, 0, 1.8, 6, 0, 2.6, 2.8, 0, 12.5, 10.6, 2, 7.9],
        "Vitamins": ["A, C", "B6, B12", "B1", "E, Niacin", "D, B12", "B6, C", "B, E", "B12, D", "E, B2", "B1", "B, C", "Folate"],
        "Minerals": ["Iron, Calcium", "Selenium", "Magnesium", "Magnesium", "Selenium", "Potassium", "Iron", "Selenium", "Magnesium", "Iron", "Calcium", "Iron"],
        "Category": ["Vegetable", "Meat", "Grain", "Nut", "Fish", "Fruit", "Grain", "Egg", "Nut", "Grain", "Soy", "Legume"]
    }
    return pd.DataFrame(data)

df = load_data()

# --- ‡¶è‡¶Æ‡ßç‡¶¨‡ßá‡¶°‡¶ø‡¶Ç ‡¶Æ‡¶°‡ßá‡¶≤ ---
@st.cache_resource
def get_model():
    return SentenceTransformer('all-MiniLM-L6-v2')

model = get_model()

# --- FAISS ‡¶á‡¶®‡¶°‡ßá‡¶ï‡ßç‡¶∏ ---
@st.cache_resource
def create_index():
    sentences = df.apply(lambda x: ' '.join(x.astype(str)), axis=1).tolist()
    embeddings = model.encode(sentences)
    index = faiss.IndexFlatL2(embeddings.shape[1])
    index.add(embeddings.astype('float32'))
    return index, sentences

index, sentences = create_index()

# --- ‡¶∞‡¶ø‡¶ü‡ßç‡¶∞‡¶ø‡¶≠‡¶æ‡¶∞ ---
def retrieve(query, k=3):
    query_vec = model.encode([query])
    D, I = index.search(np.array(query_vec).astype('float32'), k)
    results = []
    for i in I[0]:
        if i != -1:  # Valid index
            results.append(df.iloc[i])
    return pd.DataFrame(results).drop_duplicates(subset="Food")

# --- ‡¶∞‡ßá‡¶∏‡¶™‡¶®‡ßç‡¶∏ ‡¶ú‡ßá‡¶®‡¶æ‡¶∞‡ßá‡¶ü‡¶∞ (‡¶´‡¶ø‡¶ï‡ßç‡¶∏‡¶°) ---
def generate_response(query):
    query_lower = query.lower()
    results = retrieve(query, k=3)

    # ‡¶ö‡¶æ‡¶∞‡ßç‡¶ü ‡¶°‡¶ø‡¶´‡¶≤‡ßç‡¶ü: None
    chart = None

    # ‡¶Ø‡¶¶‡¶ø ‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶è‡¶ï‡¶ü‡¶æ ‡¶ñ‡¶æ‡¶¨‡¶æ‡¶∞‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ ‡¶•‡¶æ‡¶ï‡ßá
    food_names = [f.lower() for f in df['Food'].tolist()]
    matched_food = None
    for food in food_names:
        if food in query_lower:
            matched_food = food.title()
            break

    # Nutrition breakdown
    if "breakdown" in query_lower or "composition" in query_lower:
        if not results.empty:
            row = results.iloc[0]
            fig = px.pie(
                values=[row['Protein (g)'], row['Fat (g)'], row['Carbs (g)']],
                names=['Protein', 'Fat', 'Carbs'],
                title=f"{row['Food']} - Nutrition"
            )
            chart = fig
            return f"üìä {row['Food']} ‡¶è‡¶∞ ‡¶™‡ßÅ‡¶∑‡ßç‡¶ü‡¶ø ‡¶ó‡¶†‡¶® (‡¶™‡ßç‡¶∞‡¶§‡¶ø 100g):\n\n" + \
                   f"**‡¶ï‡ßç‡¶Ø‡¶æ‡¶≤‡ßã‡¶∞‡¶ø**: {row['Calories']} kcal\n" + \
                   f"**‡¶™‡ßç‡¶∞‡ßã‡¶ü‡¶ø‡¶®**: {row['Protein (g)']}g\n" + \
                   f"**‡¶´‡ßç‡¶Ø‡¶æ‡¶ü**: {row['Fat (g)']}g\n" + \
                   f"**‡¶ï‡¶æ‡¶∞‡ßç‡¶¨‡¶∏**: {row['Carbs (g)']}g", chart

    # Protein, fat, carbs query
    if "protein" in query_lower:
        if matched_food:
            row = df[df['Food'].str.contains(matched_food, case=False)].iloc[0]
            return f"üü¢ {row['Food']} ‡¶è‡¶∞ ‡¶™‡ßç‡¶∞‡ßã‡¶ü‡¶ø‡¶®: **{row['Protein (g)']}g** (‡¶™‡ßç‡¶∞‡¶§‡¶ø 100g)", None
    if "calorie" in query_lower or "kcal" in query_lower:
        if matched_food:
            row = df[df['Food'].str.contains(matched_food, case=False)].iloc[0]
            return f"üî• {row['Food']} ‡¶è‡¶∞ ‡¶ï‡ßç‡¶Ø‡¶æ‡¶≤‡ßã‡¶∞‡¶ø: **{row['Calories']} kcal** (‡¶™‡ßç‡¶∞‡¶§‡¶ø 100g)", None

    # Diet plan
    if "diet plan" in query_lower or "meal plan" in query_lower:
        sample = df.sample(4)
        return "üìã ‡¶∏‡ßç‡¶Ø‡¶æ‡¶Æ‡ßç‡¶™‡¶≤ ‡¶°‡¶æ‡¶Ø‡¶º‡ßá‡¶ü ‡¶™‡ßç‡¶≤‡ßç‡¶Ø‡¶æ‡¶®:\n\n" + \
               sample[['Food', 'Calories', 'Protein (g)', 'Carbs (g)', 'Fat (g)']].to_markdown(index=False), None

    # Alternatives
    if "alternative" in query_lower or "replace" in query_lower or "allergic" in query_lower:
        if "peanut" in query_lower or "nut" in query_lower:
            safe = df[df['Category'] != 'Nut'].sample(3)
            return "‚úÖ ‡¶™‡¶ø‡¶®‡¶æ‡¶ü ‡¶¨‡¶æ‡¶¶‡ßá ‡¶¨‡¶ø‡¶ï‡¶≤‡ßç‡¶™:\n\n" + \
                   safe[['Food', 'Category', 'Protein (g)']].to_markdown(index=False), None

    # Default: ‡¶Ø‡ßá‡¶ï‡ßã‡¶®‡ßã ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®‡ßá ‡¶∏‡¶Ç‡¶∂‡ßç‡¶≤‡¶ø‡¶∑‡ßç‡¶ü ‡¶ñ‡¶æ‡¶¨‡¶æ‡¶∞ ‡¶¶‡ßá‡¶ñ‡¶æ‡¶ì
    if not results.empty:
        return "üîç ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßá ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶§‡¶•‡ßç‡¶Ø:\n\n" + \
               results[['Food', 'Calories', 'Protein (g)', 'Fat (g)', 'Carbs (g)']].to_markdown(index=False), None

    # ‡¶Ø‡¶¶‡¶ø ‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶®‡¶æ ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º
    return "‚ùå ‡¶ñ‡¶æ‡¶¨‡¶æ‡¶∞ ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßá ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø‡•§ ‡¶Ö‡¶®‡ßç‡¶Ø ‡¶®‡¶æ‡¶Æ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶® (‡¶Ø‡ßá‡¶Æ‡¶®: spinach, banana, chicken)‡•§", None

# --- ‡¶ö‡ßç‡¶Ø‡¶æ‡¶ü UI ---
if "messages" not in st.session_state:
    st.session_state.messages = []

for msg in st.session_state.messages:
    with st.chat_message(msg["role"]):
        st.markdown(msg["content"])
        if "chart" in msg and msg["chart"]:
            st.plotly_chart(msg["chart"], use_container_width=True)

if prompt := st.chat_input("‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶® ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®..."):
    st.session_state.messages.append({"role": "user", "content": prompt})
    with st.chat_message("user"):
        st.markdown(prompt)

    with st.chat_message("assistant"):
        response, chart = generate_response(prompt)
        st.markdown(response)
        if chart is not None:
            st.plotly_chart(chart, use_container_width=True)
        st.session_state.messages.append({
            "role": "assistant",
            "content": response,
            "chart": chart
        })

# --- ‡¶∏‡¶æ‡¶á‡¶°‡¶¨‡¶æ‡¶∞ ---
with st.sidebar:
    st.header("üìä ‡¶°‡ßá‡¶ü‡¶æ ‡¶®‡¶Æ‡ßÅ‡¶®‡¶æ")
    st.dataframe(df[['Food', 'Calories', 'Protein (g)']].sample(5))
    st.markdown("### üìå ‡¶ü‡ßç‡¶∞‡¶æ‡¶á ‡¶ï‡¶∞‡ßÅ‡¶®")
    st.write("‚Ä¢ ‡¶™‡¶æ‡¶≤‡¶Ç ‡¶∂‡¶æ‡¶ï‡ßá ‡¶ï‡¶§ ‡¶™‡ßç‡¶∞‡ßã‡¶ü‡¶ø‡¶®?")
    st.write("‚Ä¢ ‡¶ö‡¶ø‡¶ï‡ßá‡¶® ‡¶¨‡ßç‡¶∞‡ßá‡¶∏‡ßç‡¶ü‡ßá‡¶∞ ‡¶™‡ßÅ‡¶∑‡ßç‡¶ü‡¶ø ‡¶ó‡ßÅ‡¶£")
    st.write("‚Ä¢ ‡¶ï‡¶Æ ‡¶ï‡ßç‡¶Ø‡¶æ‡¶≤‡ßã‡¶∞‡¶ø‡¶∞ ‡¶´‡¶≤ ‡¶ï‡ßÄ ‡¶Ü‡¶õ‡ßá?")
    st.write("‚Ä¢ ‡¶¨‡¶æ‡¶¶‡¶æ‡¶Æ‡ßá‡¶∞ ‡¶¨‡¶ø‡¶ï‡¶≤‡ßç‡¶™ ‡¶ï‡ßÄ?")
